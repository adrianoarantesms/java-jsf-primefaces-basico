{
  "name": "Java-jsf-primefaces-basico",
  "tagline": "Este repositório tem como objetivo, disponibilizar uma visão geral de um projeto java com jsf e primefaces, com um exemplo básico, porem, bem objetivo.",
  "body": "#Tutorial Básico para JavaWeb-Jsf-Primefaces\r\n    \r\n    Este tutorial tem como objetivo exemplificar uma visão básica e ao mesmo tempo ampla \r\n    no sentido de ver os dois mundos back-end e front-end. Vale lembrar que esse exemplo \r\n    é bem simples e não vamos se aprofundar em padrões de projetos, somente no que é preciso \r\n    para fazer funcionar uma aplicação java web com um modelo básico.\r\n\r\n#####Para isso vamos precisar:\r\n  \r\n##\r\nIDE Eclipse Mars 1 http://www.eclipse.org/downloads/packages/eclipse-ide-java-ee-developers/mars2\r\n##\r\nApache Tomcat 8 https://tomcat.apache.org/download-80.cgi\r\n##\r\nJava JDK 8 http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html?ssSourceSiteId=otnpt\r\n##\r\nMySql http://dev.mysql.com/get/Downloads/MySQLInstaller/mysql-installer-web-community-5.7.11.0.msi. Instale a opção Server, a configuração padrão de usuário é root senha root.\r\nMysql Workbench gerenciador para o MYSQL https://dev.mysql.com/downloads/workbench/\r\n##\r\nInstale também o MySql WorkBench para acessar e criar os \"schemas\". Esta no mesmo Instalador do MYSQL.\r\n  \r\n#####Para a instalação seguir os instaladores.\r\n  \r\nconfigurar as variaveis de ambiente:\r\n \r\n##\r\nJAVA_HOME = C:\\Program Files\\Java\\jdk1.8.0_66 \r\n##\r\nPATH = %JAVA_HOME%\\bin,..\r\n##\r\nECLIPSE_HOME = C:\\eclipse\r\n##\r\nPATH = %ECLIPSE_HOME%,...\r\n##\r\nCATALINA_HOME = C:\\tomcat\r\n##\r\nPATH = %CATALINA_HOME%,..\r\n##\r\n[Obs: Não se esqueça de colocar os caminhos de acordo com sua instalação.]\r\n\r\n##\r\n##\r\n\r\n### Configurando o TomCat na IDE.\r\n\tVá em Windows> Preferences> Server> Runtime Everonments> Add\r\n![](https://github.com/adrianoarantesms/java-jsf-primefaces-basico/blob/master/slides/tomcat%20configuracao%2001.PNG?raw=true)\r\n##\r\n##\r\n\tSelecione TomCat 8 e marque a opção para criar em um novo local\r\n![](https://github.com/adrianoarantesms/java-jsf-primefaces-basico/blob/master/slides/tomcat%20configuracao%2002.PNG?raw=true)\t\r\n##\r\n##\r\n\tNa opção JRE selecione a instalação JDK do java\r\n![](https://github.com/adrianoarantesms/java-jsf-primefaces-basico/blob/master/slides/tomcat%20configuracao%2003.PNG?raw=true)\t\r\n##\r\n##\r\n\tSe tudo ocorrer bem o tomcat estará adicionado, mas a diante, veremos como subir \r\n\to projeto depois pronto.\r\n![](https://github.com/adrianoarantesms/java-jsf-primefaces-basico/blob/master/slides/tomcat%20configuracao%2004.PNG?raw=true)\t\r\n  \r\n  \r\n##\r\n##\r\n##\r\n##\r\n\r\n\r\n\r\n# *Iniciando o Projeto\r\n    Vamos Criar um novo projeto \"Dynamic Web project\" (Poderia ser um projeto maven), \r\n    mas não vamos complicar agora é mais pra entender o conceito.\r\n    \r\n##\r\n##\r\n##\r\n\r\n![](https://github.com/adrianoarantesms/java-jsf-primefaces-basico/blob/master/slides/new%20project%2001.png?raw=true)\r\n![](https://github.com/adrianoarantesms/java-jsf-primefaces-basico/blob/master/slides/new%20project%2002.png?raw=true)\r\n![](https://github.com/adrianoarantesms/java-jsf-primefaces-basico/blob/master/slides/new%20project%2003.png?raw=true)\r\n\r\n##\r\n##\r\n##\r\n# *A estrutura do projeto deve ficar parecida com essa:\r\n##\r\n![](https://github.com/adrianoarantesms/java-jsf-primefaces-basico/blob/master/slides/EstruturaProjeto.PNG?raw=true)\r\n\r\n##\r\n##\r\n##\r\n##\r\n\r\n# Adicionando as libs de dependência\r\n    Para resumir as dependências vamos usar:\r\n##\r\n    Hibernate e suas dependências para o mapeamento na nossa base de dados\r\n##\r\n    Javax.faces, Java Server Faces (JSF) é uma especificação Java para a \r\n    construção de interfaces de usuário baseadas em componentes para aplicações web.\r\n##\r\n    primefaces, PrimeFaces é uma biblioteca de componentes de código aberto para \r\n    o JSF 2.0 para criar as interfaces Web.\r\n##\r\n    mysql-connector, vamos usar para conectar na nossa base mysql\r\n    \r\n    Baixe esse arquivo, descompacte arraste para a pasta lib no projeto\r\nhttps://github.com/adrianoarantesms/java-jsf-primefaces-basico/blob/master/lib/libs-dependencies.rar\r\n##\r\n![](https://github.com/adrianoarantesms/java-jsf-primefaces-basico/blob/master/slides/libs%20descompactadas.PNG?raw=true)\r\n##\r\n![](https://github.com/adrianoarantesms/java-jsf-primefaces-basico/blob/master/slides/pasta%20correta%20libs.PNG?raw=true)\r\n##\r\n##\r\n##\r\n\r\n\r\n# *Criando as classes\r\n    Vamos trabalhar com a estrutura MVC \"Model, View, Controller\", onde nossa classe\r\n    \"Modelo\" representará nossa tabela, nosso Controller que chamaremos de \"DAO\" fará \r\n    a persistência de dados e por fim nossa \"View\" que representaremos como classeMB \r\n    \"ManagedBean\" que comunicara com nosso frontEnd Através do framework \"JSF\".\r\n    \r\n    \r\n##\r\n# Modelo  \r\n    Criaremos uma classe Pessoa dentro de um package \"Model\" com os atributos\r\n    \"codigo, nome, telefone, email\";\r\n##    \r\n![](https://github.com/adrianoarantesms/java-jsf-primefaces-basico/blob/master/slides/new%20classe%20Pessoa.PNG?raw=true)\r\n\r\n# Classe Pessoa\r\n```java\r\n\r\n    package model;\r\n\r\n    import javax.persistence.Column;\r\n    import javax.persistence.Entity;\r\n    import javax.persistence.GeneratedValue;\r\n    import javax.persistence.GenerationType;\r\n    import javax.persistence.Id;\r\n    \r\n    @Entity\r\n    public class Pessoa {\r\n    \t\r\n    \t@Id\r\n    \t@GeneratedValue(strategy=GenerationType.IDENTITY)\r\n    \tprivate int id;\r\n    \t\r\n    \t@Column \r\n    \tprivate String nome;\r\n    \t\r\n    \t@Column \r\n    \tprivate String email;\r\n    \t\r\n    \t@Column \r\n    \tprivate String telefone;\t\r\n    \t\r\n    \t\r\n    \r\n    }\r\n}\r\n```\r\n\r\n# Vamos gerar os Getters And Setters para publicar nossos atributos\r\n\r\n![](https://github.com/adrianoarantesms/java-jsf-primefaces-basico/blob/master/slides/model-generated-gettersandsetters.png?raw=true)\r\n\r\n    \r\n# Classe pessoa completa\r\n```java\r\n    package model;\r\n\r\n    import javax.persistence.Column;\r\n    import javax.persistence.Entity;    \r\n    import javax.persistence.GeneratedValue;\r\n    import javax.persistence.GenerationType;\r\n    import javax.persistence.Id;\r\n\r\n    @Entity\r\n    public class Pessoa {\r\n\t\r\n\t@Id\r\n\t@GeneratedValue(strategy=GenerationType.IDENTITY)\r\n\tprivate int id;\r\n\t\r\n\t@Column \r\n\tprivate String nome;\r\n\t\r\n\t@Column \r\n\tprivate String email;\r\n\t\r\n\t@Column \r\n\tprivate String telefone;\r\n\t\r\n\t\r\n\t\r\n\r\n\tpublic int getId() {\r\n\t\treturn id;\r\n\t}\r\n\r\n\tpublic void setId(int id) {\r\n\t\tthis.id = id;\r\n\t}\r\n\r\n\tpublic String getNome() {\r\n\t\treturn nome;\r\n\t}\r\n\r\n\tpublic void setNome(String nome) {\r\n\t\tthis.nome = nome;\r\n\t}\r\n\r\n\tpublic String getEmail() {\r\n\t\treturn email;\r\n\t}\r\n\r\n\tpublic void setEmail(String email) {\r\n\t\tthis.email = email;\r\n\t}\r\n\r\n\tpublic String getTelefone() {\r\n\t\treturn telefone;\r\n\t}\r\n\r\n\tpublic void setTelefone(String telefone) {\r\n\t\tthis.telefone = telefone;\r\n\t}\r\n\t\r\n    }\r\n```\r\n\r\n# Agora vamos configurar nosso arquivo de persistência para conexão com o MYSQL.\r\n##\r\n##\r\n\tCrie um novo folder chamado META-INF dentro da pasta \"src\"\r\n![](https://github.com/adrianoarantesms/java-jsf-primefaces-basico/blob/master/slides/new%20Folder.PNG?raw=true)\r\n![](https://github.com/adrianoarantesms/java-jsf-primefaces-basico/blob/master/slides/new%20Folder%20META-INF.PNG?raw=true)\r\n\r\n##\r\n##\r\n\tCrie um novo arquivo com o nome persistence.xml dentro da pasta META-INF que acabou de criar\r\n![](https://github.com/adrianoarantesms/java-jsf-primefaces-basico/blob/master/slides/new%20file%20persistence.PNG?raw=true)\r\n\r\n\r\n\r\n##\r\n##\r\n# Copie o conteudo e cole no corpo do arquivo\r\n```xml\r\n\t<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n\t<persistence version=\"1.0\"\r\n\t\txmlns=\"http://java.sun.com/xml/ns/persistence\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n\t\txsi:schemaLocation=\"http://java.sun.com/xml/ns/persistence http://java.sun.com/xml/ns/persistence/persistence_1_0.xsd\">\r\n\t    <persistence-unit name=\"conexao\" transaction-type=\"RESOURCE_LOCAL\">  \r\n\t    \t<provider>org.hibernate.ejb.HibernatePersistence</provider>  \r\n\t    \t\r\n\t    \t<class>model.Contato</class>\r\n\t    \t\r\n\t        <properties>\r\n\t       \t\t<property name=\"hibernate.archive.autodetection\" value=\"class\" />\r\n\t       \t\t \r\n\t            <!-- Conexão com o banco de dados -->\r\n\t\t\t\t<property name=\"hibernate.dialect\" value=\"org.hibernate.dialect.MySQL5InnoDBDialect\" />\r\n\t\t\t\t<property name=\"hibernate.connection.driver_class\" value=\"com.mysql.jdbc.Driver\" />\t\t\t\t\t\t\r\n\t\t\t\t<property name=\"hibernate.connection.url\" \tvalue=\"jdbc:mysql://LocalHost:3306/java-jsf-primefaces-basico\" />\r\n\t\t\t\t<property name=\"hibernate.connection.user\" value=\"root\" />\r\n\t\t\t\t<property name=\"hibernate.connection.password\" value=\"root\" />\r\n\t            <property name=\"hibernate.hbm2ddl.auto\" value=\"create\" />\r\n\t            <property name=\"hibernate.hbm2ddl.auto\" value=\"update\"/>\r\n\t \r\n\t            <!--Configuracoes de Debug-->\r\n\t\t\t\t<property name=\"hibernate.show_sql\" value=\"true\" />\r\n\t\t\t\t<property name=\"hibernate.format_sql\" value=\"true\" />\r\n\t\t\t\t<property name=\"use_sql_comments\" value=\"true\" />\r\n\t\t\t\t\r\n\t\t\t</properties>\r\n\t    </persistence-unit>\r\n\t</persistence>\r\n```\r\n\r\n\r\n# Entendendo o Arquivo\r\n\r\n\tTemos a linha <class>model.Pessoa</class>, onde mapeamos quem são nossas \r\n\tclasses entidades, ou seja, todas as classes modelos que representam as \r\n\ttabelas do banco de dados precisam ser mapeadas aqui.\r\n\tNa linha \"hibernate.connection.url\" temos o caminho do MYSQL junto com seu schema \r\n\t( Não esqueça de criar o schema \"java-jsf-primefaces-basico\" no MYSQL).\r\n\tUsuário e Senha padrão do MYSQL root root, altere caso seu MYSQL seja outro usuário e senha.\r\n\tjá nas linhas <property name=\"hibernate.hbm2ddl.auto\" value=\"create\" /> e \r\n\t<property name=\"hibernate.hbm2ddl.auto\" value=\"update\" />. significa \r\n\tque o hibernate irá criar as tabelas e atributos na base de dados e alterar se necessário\r\n\t\r\n![](https://github.com/adrianoarantesms/java-jsf-primefaces-basico/blob/master/slides/configure%20persistence.PNG?raw=true)\r\n\r\n\r\n##\r\n##\r\n##\r\n##\r\n\r\n# Vamos criar nosso DAO\r\n##\r\n##\r\n![](https://github.com/adrianoarantesms/java-jsf-primefaces-basico/blob/master/slides/NewPessoaDAO.PNG?raw=true)\r\n##\r\n\tNote que se Colocar um package que não existe a própria IDE irá criá-lo.\r\n\r\n# Estrutura de Pastas após criar o DAO deve ficar assim:\r\n![](https://github.com/adrianoarantesms/java-jsf-primefaces-basico/blob/master/slides/NewPessoaDAOEstrutura.PNG?raw=true)\r\n\t\r\n\t\r\n# Crud Básico\r\n\tPara o DAO, vamos fazer nosso CRUD básico com os métodos de Salvar, Excluir e \r\n\tListar usando a API de persistência JPA.\r\n\t-----------------------------------------------------------------------------------\r\n```java\t\r\npackage dao;\r\n\r\nimport java.util.List;\r\n\r\nimport javax.persistence.EntityManager;\r\nimport javax.persistence.EntityManagerFactory;\r\nimport javax.persistence.Persistence;\r\nimport javax.persistence.Query;\r\n\r\nimport model.Pessoa;\r\n\r\npublic class PessoaDAO {\r\n\tEntityManagerFactory emf;\r\n\tEntityManager em;\r\n\r\n\tpublic PessoaDAO() {\r\n\t\temf = Persistence.createEntityManagerFactory(\"conexao\");\r\n\t\tem = emf.createEntityManager();\r\n\r\n\t}\r\n\r\n\tpublic void salvar(Pessoa pessoa) {\r\n\t\tem.getTransaction().begin();\r\n\t\tem.merge(pessoa);\r\n\t\tem.getTransaction().commit();\r\n\t\temf.close();\r\n\r\n\t}\r\n\r\n\tpublic void excluir(Pessoa pessoa) {\r\n\t\tem.getTransaction().begin();\r\n\t\tem.remove(pessoa);\r\n\t\tem.getTransaction().commit();\r\n\t\temf.close();\r\n\t}\r\n\t@SuppressWarnings(\"unchecked\")\r\n\tpublic List<Pessoa> listarTodos() {\r\n\t\tem.getTransaction().begin();\r\n\t\tQuery consulta = em.createQuery(\"select pessoa from Pessoa pessoa\");\r\n\t\tList<Pessoa> pessoas = consulta.getResultList();\r\n\t\tem.getTransaction().commit();\r\n\t\temf.close();\r\n\t\treturn pessoas;\r\n\t}\r\n\r\n}\r\n```\t\r\n\t------------------------------------------------------------------------------------------\r\n##\r\n##\r\n# Confira os imports para certificar que estão buscando do Javax.Persistence\r\n#![](https://github.com/adrianoarantesms/java-jsf-primefaces-basico/blob/master/slides/Imports%20Javax.Persiscente.PNG?raw=true)\r\n\r\n##\r\n##\r\n##\r\n# Controller \r\n\tVamos criar nosso Controller, a classe \"Managed Bean\" onde nosso FrontEnd vai se comunicar.\r\n![](https://github.com/adrianoarantesms/java-jsf-primefaces-basico/blob/master/slides/PessoaMB%20new.PNG?raw=true)\r\n##\r\n\tA estrutura ficará assim.\r\n![](https://github.com/adrianoarantesms/java-jsf-primefaces-basico/blob/master/slides/PessoaMB%20estrutura.PNG?raw=true)\t\r\n##\r\n\tA classe contem a anotação @ManagedBean, onde o JSF irá \r\n\tenchergar sua classe e métodos. Eis a mágica, é nessa parte \r\n\tque publicamos o que nosso FrontEnd vai usar. Publicamos aqui \r\n\tnossa classe pessoa, nossa lista de pessoas, e o métodos salvar por enquanto.\r\n![](https://github.com/adrianoarantesms/java-jsf-primefaces-basico/blob/master/slides/PessoaMB%20classe.PNG?raw=true)\t\r\n\r\n##\r\n##\r\n##\r\n\r\n# Teste\r\n\tVamos agora testar nossa classe para certificar que está tudo certo, persistindo e listando \r\n\tda base de dados. Primeiro vamos criar o schema no mysql. Instale o MySQL \r\n\te o Gerenciador Workbench de acordo com a referencia no inicio desse artigo para criar o schema se tiver\r\n\tdúvida tem a referencia abaixo.\r\n![](https://github.com/adrianoarantesms/java-jsf-primefaces-basico/blob/master/slides/mysql%20Criacao%20de%20Schema.PNG)\t\r\n##\t\r\n\tAgora vamos criar um novo Teste automatizado .\r\n\tFile>New>Other>Junit Test Case\r\n![](https://github.com/adrianoarantesms/java-jsf-primefaces-basico/blob/master/slides/teste%20New.PNG?raw=true)\r\n##\r\n\tSe aparecer uma tela pedindo para adicionar a biblioteca do JUNIT pode confirmar\r\n![](https://github.com/adrianoarantesms/java-jsf-primefaces-basico/blob/master/slides/teste%20New3.PNG?raw=true)\t\r\n##\r\n\tEstrutura deve ficar assim:\r\n##\r\n![](https://github.com/adrianoarantesms/java-jsf-primefaces-basico/blob/master/slides/teste%20Estrutura.PNG?raw=true)\r\n\t\r\n##\r\n##\r\n\tClasse Teste\r\n```java\r\n\tpackage test;\r\n\r\n\timport static org.junit.Assert.*;\r\n\timport org.junit.Test;\r\n\t\r\n\timport dao.PessoaDAO;\r\n\timport model.Pessoa;\r\n\t\r\n\tpublic class TestePessoa {\r\n\t\tprivate PessoaDAO pessoaDAO;\r\n\t\tprivate Pessoa pessoa;\r\n\t\r\n\t\t@Test\t\r\n\t\tpublic void testSalvar() {\r\n\t\t\tpessoa = new Pessoa();\r\n\t\t\t\t\t\r\n\t\t\tpessoa.setId(1);\r\n\t\t\tpessoa.setNome(\"Teste Inserção Pessoa\");\r\n\t\t\tpessoa.setEmail(\"pessoa@teste.com\");\r\n\t\t\tpessoa.setTelefone(\"4599991231\");\r\n\t\t\t\r\n\t\t\tpessoaDAO = new PessoaDAO();\r\n\t\t\tpessoaDAO.salvar(pessoa);\r\n\t\t\t\r\n\t\t\t\r\n\t\t\tassertTrue(pessoaDAO.listarTodos().size()>0);\r\n\t\t\t\t\t\r\n\t\t\t\r\n\t\t\t\r\n\t\t}\r\n\t\r\n\t}\r\n\r\n```\r\n\r\n\r\n##\r\n\tPara executar nosso teste > Botão direito no projeto>Run As>JUnit Test\r\n\tSe Tudo ocorrer bem nosso teste deve passar\r\n![](https://github.com/adrianoarantesms/java-jsf-primefaces-basico/blob/master/slides/teste%20Run.PNG?raw=true)\r\n##\r\n##\r\n\tSe o teste passou então confira na sua base de dados se criou as tabelas e inseriu o registro na tabela Pessoa\r\n![](https://github.com/adrianoarantesms/java-jsf-primefaces-basico/blob/master/slides/teste%20MySql.PNG?raw=true)\r\n##\r\n##\r\n# Parte WEB JFS-PRIMEFACES.\r\n\tVamos modificar o web.xml adicionando as dependências do JSF\r\n\t\r\n```xml\r\n\t<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n\t<web-app xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns=\"http://java.sun.com/xml/ns/javaee\" xsi:schemaLocation=\"http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd\" id=\"WebApp_ID\" version=\"3.0\">\r\n\t  <display-name>java-jsf-primefaces-basico</display-name>\r\n\t  <welcome-file-list>\r\n\t    <welcome-file>index.xhtml</welcome-file>    \r\n\t  </welcome-file-list>\r\n\t  <servlet>\r\n\t    <servlet-name>Faces Servlet</servlet-name>\r\n\t    <servlet-class>javax.faces.webapp.FacesServlet</servlet-class>\r\n\t    <load-on-startup>1</load-on-startup>\r\n\t  </servlet>\r\n\t  <servlet-mapping>\r\n\t    <servlet-name>Faces Servlet</servlet-name>\r\n\t    <url-pattern>*.xhtml</url-pattern>\r\n\t  </servlet-mapping>\r\n\t</web-app>\t\r\n```\r\n\t\r\n##\r\n##\r\n### Entendendo o Arquivo\r\n\tColocamos a dependência do javax.faces e modificamos a extensão do arquivo html \r\n\tpara xhtml que tem mais vantagens e compatibilidades com xml. Mais sobre o assunto \r\n\tno link http://www.maujor.com/w3ctuto/xhtmlfaq.html#need. Mapeamos também quem \r\n\tvai ser o index da pagina, para que ela se direcione para o html padrão quando\r\n\to usuário digitar o link sem referenciar o mesmo.\r\n\t\r\n![](https://github.com/adrianoarantesms/java-jsf-primefaces-basico/blob/master/slides/webxml%20explicacao.PNG?raw=true)\t\r\n##\r\n##\r\n### Pagina HTML\r\n\tVamos lá, o próximo passo é criarmos nossa pagina html com as configurações necessárias \r\n\tpara usar o jsf e o primefaces. Em cima da pasta WebContent > New> File. Nomeie como index.xtml.\r\n\tTodos os arquivos html ou xhtml devem ficar nessa pasta, porém, pode-se organizar em subpastas.\r\n![](https://github.com/adrianoarantesms/java-jsf-primefaces-basico/blob/master/slides/index%20html%20new.PNG?raw=true)\t\r\n\r\n##\r\n##\r\n### Dependências do arquivo\r\n\r\n```html\r\n\t<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\"   \r\n\t   \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\r\n\t\r\n\t<html xmlns=\"http://www.w3.org/1999/xhtml\"\r\n\txmlns:ui=\"http://java.sun.com/jsf/facelets\"\r\n\txmlns:h=\"http://java.sun.com/jsf/html\"\r\n\txmlns:f=\"http://java.sun.com/jsf/core\"\r\n\txmlns:p=\"http://primefaces.org/ui\">\r\n\t<f:view contentType=\"text/html\"></f:view>\r\n\t\r\n\t\r\n\t\r\n\t\r\n\t\r\n\t\r\n\t\r\n\t\r\n\t</html>\r\n\t\r\n```\r\n##\r\n### Entendendo o arquivo\r\n\tAs dependências do jsf e primefaces estão no topo do arquivo, onde referencia a \r\n\tletra p para primefaces e as demais para jsf.\r\n\r\n![](https://github.com/adrianoarantesms/java-jsf-primefaces-basico/blob/master/slides/index%20html%20dependencias.PNG?raw=true)\t\r\n\t\t\r\n##\r\n##\r\n### \tA partir dai, é só colocar os componentes primefaces e ligar com o ManagedBean e seus métodos.\r\n\r\n\tVamos começar com inputs e um botão para salvar. Para exemplos temos o site do \r\n\tprimefaces que tem os componentes prontos http://www.primefaces.org/showcase/ .\r\n\tPara exemplificar o xhtml, temos os componentes do primefaces dentro de um \r\n\tpanelGrid para que quando salvarmos alguma informação, a propriedade update possa\r\n\tatualizar os componentes e assim termos um refresh desses campos que foram \r\n\tcriados dentro do panel. Repare que para cada input(autoComplete) tem um \r\n\toutPut label para descrição referenciando para o id do input, assim a \r\n\tdescrição fica alinhada ao componente. Já no splitButton setamos a propriedade \r\n\tupdate, para fazer o refresh da pagina. Mais abaixo temos um dataTable para \r\n\tlistar as informações da buscando do controller uma Lista. Também tem os \r\n\tatributos ligados a um outputText do dataTable;\r\n\t\r\n![](https://github.com/adrianoarantesms/java-jsf-primefaces-basico/blob/master/slides/index%20html%20Explicacao.PNG?raw=true)\t\r\n\r\n##\r\n# Index Completo\r\n\r\n```xhtml\r\n<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\"   \r\n   \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\r\n\r\n<html xmlns=\"http://www.w3.org/1999/xhtml\"\r\n\txmlns:ui=\"http://java.sun.com/jsf/facelets\"\r\n\txmlns:h=\"http://java.sun.com/jsf/html\"\r\n\txmlns:f=\"http://java.sun.com/jsf/core\"\r\n\txmlns:p=\"http://primefaces.org/ui\">\r\n<f:view contentType=\"text/html\"></f:view>\r\n\r\n<h:head>\r\n\r\n</h:head>\r\n\r\n\r\n<h:body>\r\n\t<h:form>\r\n\t\r\n\t<!-- Form de Cadastro -->\r\n\t\t<h:panelGrid id=\"panelgrid\" columns=\"2\" cellpadding=\"5\">\r\n\t\t\t<p:outputLabel value=\"Nome:\" for=\"acNome\" />\r\n\t\t\t<p:autoComplete id=\"acNome\" value=\"#{pessoaMB.pessoa.nome}\" />\r\n\t\t\t<p:outputLabel value=\"E-Mail:\" for=\"acEmail\" />\r\n\t\t\t<p:autoComplete id=\"acEmail\" value=\"#{pessoaMB.pessoa.email}\" />\r\n\t\t\t<p:outputLabel value=\"Telefone:\" for=\"acTelefone\" />\r\n\t\t\t<p:autoComplete id=\"acTelefone\" value=\"#{pessoaMB.pessoa.telefone}\" />\r\n \t\t\t<p:growl id=\"messages\" /> \r\n\t\t\t<p:splitButton value=\"salvar\" action=\"#{pessoaMB.salvar}\"\r\n\t\t\t\ttype=\"button\" update=\"panelgrid\" icon=\"ui-icon-disk\">\r\n\t\t\t</p:splitButton>\r\n\r\n\r\n\t\t\t<!-- Grid de Consulta -->\r\n\t\t\t<p:dataTable var=\"c\" value=\"#{pessoaMB.list}\">\r\n\t\t\t\t<p:column headerText=\"Id\">\r\n\t\t\t\t\t<h:outputText value=\"#{c.id}\" />\r\n\t\t\t\t</p:column>\r\n\t\t\t\t<p:column headerText=\"Nome\">\r\n\t\t\t\t\t<h:outputText value=\"#{c.nome}\" />\r\n\t\t\t\t</p:column>\r\n\t\t\t\t<p:column headerText=\"Email\">\r\n\t\t\t\t\t<h:outputText value=\"#{c.email}\" />\r\n\t\t\t\t</p:column>\r\n\t\t\t\t<p:column headerText=\"Telefone\">\r\n\t\t\t\t\t<h:outputText value=\"#{c.telefone}\" />\r\n\t\t\t\t</p:column>\r\n\t\t\t</p:dataTable>\r\n\t\t</h:panelGrid>\r\n\t</h:form>\r\n\t\r\n</h:body>\r\n\r\n\r\n</html>\r\n```\r\n\r\n\r\n##\r\n##\r\n# Testando a aplicação\r\n\tBotão direito no projeto> Run Server. Como não tem ainda um servidor \r\n\tconfigurado para o projeto, vamos definir o tomcat instalado no inicio do tutorial.\r\n![](https://github.com/adrianoarantesms/java-jsf-primefaces-basico/blob/master/slides/iniciando%20server%2001.PNG?raw=true)\t\r\n##\r\n\tConfira se o projeto está selecionado e finish\r\n![](https://github.com/adrianoarantesms/java-jsf-primefaces-basico/blob/master/slides/iniciando%20server%2002.PNG?raw=true)\t\r\n\r\n\r\n# Por fim a nossa pagina rodando no navegador.\r\n![](https://github.com/adrianoarantesms/java-jsf-primefaces-basico/blob/master/slides/pagina%20Start.PNG?raw=true)\r\n\r\n\r\n### Resumindo era isso que queria mostrar, para quem está aprendendo é importante ter uma visao geral como funciona os dois mundos, e deixo como desafio implementar os métodos alterar e excluir. Até a próxima.\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}